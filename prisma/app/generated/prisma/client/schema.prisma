// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id               String             @id @default(cuid())
  owner            String
  ownerName        String?
  title            String
  description      String
  price            Float
  main_image       String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  section          Section[] // One-to-many relationship with Section
  rating           Rating[]
  enrolledStudents EnrolledStudents[]
}

model Section {
  id           String         @id @default(cuid())
  sectionName  String
  courseId     String // Foreign key to Course
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videoSection VideoSection[] // One-to-many relationship with VideoSection
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model VideoSection {
  id                 String   @id @default(cuid())
  video_title        String
  video_url          String
  video_public_id    String
  video_thumbnailUrl String
  video_duration     Float
  sectionId          String
  section            Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Rating {
  id       String @id @default(cuid())
  value    Int
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId   String
}

model EnrolledStudents {
  id             String          @id @default(cuid())
  order_id       String          @unique
  amount         Int
  currency       String
  payment_status payment_status
  studentId      String
  email          String
  contact        String
  invoice_name   String
  created_at     String
  courseId       String
  course         Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseProgress CourseProgress?
}

model CourseProgress {
  id                   String            @id @default(cuid())
  enrolledStudent      EnrolledStudents  @relation(fields: [enrolledStudentId], references: [id], onDelete: Cascade)
  enrolledStudentId    String            @unique
  courseId             String
  studentId            String
  completionPercentage Float             @default(0)
  isCompleted          Boolean           @default(false)
  sectionProgress      SectionProgress[]
}

model SectionProgress {
  id                   String          @id @default(cuid())
  courseProgress       CourseProgress  @relation(fields: [courseProgressId], references: [id], onDelete: Cascade)
  courseProgressId     String
  sectionId            String
  completionPercentage Float           @default(0)
  isCompleted          Boolean         @default(false)
  videoProgress        VideoProgress[]
}

model VideoProgress {
  id                   String          @id @default(cuid())
  sectionProgress      SectionProgress @relation(fields: [sectionProgressId], references: [id], onDelete: Cascade)
  sectionProgressId    String
  videoSectionId       String
  video_duration       Float
  userId               String
  watchedSeconds       Float           @default(0)
  completionPercentage Float           @default(0)
  isCompleted          Boolean         @default(false)
}

model FilterPreset {
  id              String            @id @default(cuid())
  userId          String            @unique
  SavedFilterData SavedFilterData[]
}

model SavedFilterData {
  id             String       @id @default(cuid())
  name           String       @unique
  selectedRating String[]
  priceRange     Int[]
  FilterPresetId String
  FilterPreset   FilterPreset @relation(fields: [FilterPresetId], references: [id], onDelete: Cascade)
}

enum payment_status {
  PENDING
  CAPTURED
  FAILED
}
